//Source Code:
`timescale 1ns / 1ps

//////////////////////////////////////////////////////////////////////////////////
// Company: Q&A Co.
// Engineer: Amani, Alaina, Qiying
// Create Date: 11/27/2018 08:05:03 AM
// Design Name: Sequence Detectors
// Module Name: fsm_seq
// Project Name: Lab 11
// Target Devices: 
// Tool Versions: 
// Description: Generic FSM model with Moore outputs correlating // to 8 states. 
// Note: data widths of state variables are not specified 
//
// Dependencies: 
// 
// Revision:
// Revision 1.00 - File Created (07-07-2018) 
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

module fsm_seq(reset,btn,x_in,clk,z); 
    input  reset,btn,clk,x_in;
    output reg z;
     
    //- next state & present state variables
    reg [2:0] NS, PS; 
    //- bit-level state representations
    parameter [2:0] st_= 3'b000, st_0 = 3'b001, st_01 = 3'b010, st_011 = 3'b011, st_0111 = 3'b100, st_0110 = 3'b101, st_011x0 = 3'b110, st_011x01 = 3'b111; 
    

    //- model the state registers
    always @ (posedge reset, posedge clk)
       if (reset == 1) 
          PS <= st_; 
       else
          PS <= NS; 
    
    
    //- model the next-state and output decoders
    always @ (x_in,PS,btn)
    begin
       z = 0; // assign all outputs
       case(PS)
          st_:
          begin
             z = 0;        
             if (x_in == 0)
             begin  
                NS = st_0; 
             end  
             else
             begin
                NS = st_; 
             end  
          end
          
          st_0:
          begin
             z = 0;        
             if (x_in == 0)
             begin  
                NS = st_0; 
             end  
             else
             begin
                NS = st_01; 
             end  
          end
             
          st_01:
          begin
             z = 0;        
             if (x_in == 0)
             begin  
                NS = st_0; 
             end  
             else
             begin
                NS = st_011; 
             end  
          end
             
          st_011:
          begin
             z = 0;        
             if (x_in == 0 && btn == 1)
             begin  
                NS = st_0; 
             end  
             else if (x_in == 0 && btn == 0)
             begin
                NS = st_0110;
             end
             else if (x_in == 1 && btn == 1)
             begin
                NS = st_0111; 
             end  
             else 
             begin
                NS = st_;
             end
          end
                
          st_0111:
          begin
             z = 0;        
             if (x_in == 0)
             begin  
                NS = st_011x0; 
             end  
             else
             begin
                NS = st_; 
             end  
          end
          
          st_0110:
          begin
             z = 0;        
             if (x_in == 0)
             begin  
                NS = st_011x0; 
             end  
             else
             begin
                NS = st_01; 
             end  
          end
                      
          st_011x0:
          begin
             z = 0;        
             if (x_in == 0)
             begin  
                NS = st_0; 
             end  
             else
             begin
                NS = st_011x01; 
             end  
          end
          
          st_011x01:
          begin
             z = 1;        
             if (x_in == 0)
             begin  
                NS = st_0; 
             end  
             else
             begin
                NS = st_; 
             end  
          end      
                          
          default: NS = st_; 
            
          endcase
      end              
endmodule

